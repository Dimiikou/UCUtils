buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url = "https://plugins.gradle.org/m2/"
            url = "http://files.minecraftforge.net/maven"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'org.hidetake.ssh' version '2.10.1'
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = "1.12.1-1.6"
group = "de.fuzzlemann.ucutils"
archivesBaseName = "ucutils"

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    provided fileTree(dir: 'libs', include: ['*.jar'])
    shade fileTree(dir: '../UCUtils_common/target', include: ['*.jar'])

    testImplementation 'org.reflections:reflections:0.9.11'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.28.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0-RC1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.0-RC1'
}

test {
    useJUnitPlatform()
}

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.compilerArgs += '-proc:none'
    options.encoding = 'UTF-8'
}

minecraft {
    version = "1.12.1-14.22.1.2485"
    runDir = "run"
    mappings = "snapshot_20170624"
}

sourceSets {
    main {
        java {
            srcDirs('src/main/java')
        }
        resources {
            srcDirs('src/main/resources')
        }
    }
    test {
        java {
            srcDirs('src/test/java')
        }
        resources {
            srcDirs('src/test/resources')
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    ant.replaceregexp(
            file: './src/main/java/de/fuzzlemann/ucutils/commands/UCUtilsCommand.java',
            match: /\d+L; \/\/updated by gradle/,
            replace: new Date().toTimestamp().getTime() + "L; //updated by gradle",
            flags: 'g',
            byline: true
    )
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

build.dependsOn signJar

remotes {
    webServer {
        host = project.findProperty('host')
        user = project.findProperty('user')
        identity = new File(project.findProperty('identity'))
    }
}

task deployRemote(dependsOn: build) {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: 'build/libs/' + archivesBaseName + '-' + version + '.jar', into: '/var/www/html/UCUtils.jar'
            }
        }
    }
}

task deployLocal(type: Exec, dependsOn: build) {
    commandLine = ['cmd', '/c', 'start', '\"\"', 'replaceLocal.bat']
}

List<String> deactivatedTasks = Arrays.asList('check', 'sourceTestJava', 'compileTestJava', 'processTestResources', 'test', 'testClasses');
tasks.matching {
    Task task = (Task) it
    String taskName = task.name
    deactivatedTasks.contains(taskName)
}.all {
    enabled = false
}